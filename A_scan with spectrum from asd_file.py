'''

Author: AB

Description:
Script for reading .asd files generated by ULFUS
plots the recorded signal, ROI between two defined time values with t2>t1
and calculates and plots Spectrum for ROI

last edit: 20.03.24

'''

import os
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt

plt.close()

'''enter Path and filename'''
path = r'H:\Meine Ablage\Dokumente\Bachelor-Arbeit\Messungen ULFUS\20240308_Messungen_Alle Signalformen\PK6\Reflexion'
filename = r'200Vpp,SinusChirp 25kHzbis75kHz+Vvst,+80dB,PK6,M2502_Reflexion.asd'
os.chdir(path)

'''Parameter'''

'''set True if you want to save the figure from plot'''
save_signal = True

'''Trigger-delay'''
TR_delay = 1.85
'''offset from maximum to first peak of Echo in µs'''
t_off = 120

'''Samplerate'''
SR = int(10e6)
'''Maximum Amplitude in digits'''
max_BSH=8192

'''define ROI'''
t1_ROI = 400
t2_ROI = 750
'''amplification'''
amp=1
amp_dB= np.round(10*np.log10(amp),decimals=0)

file = open(filename)

'''reading Data from file'''
content = file.readlines()
dataline_prefix = 'data ='

for i in range(len(content)):
    if content[i].startswith(dataline_prefix):
        #print(['line is', i])
        data_line = i
        break

Data = content[data_line]
dataprefix = Data.partition(">")[0]+Data.partition(">")[1]
# cut out Data from line content
Data = Data.removeprefix(dataprefix)
Data = Data.replace('"', '')
Data = Data.split()
#convert Data from str to int
Data = list(map(int,Data))

'''Parameters gained from File'''
# number of samples
n_samples = len(Data)
# time per sample
i_t = 1/SR
# length of scan
max_t = n_samples * i_t
t = []
for i in range(n_samples):
    
    temp = i*i_t*1e6
    t.append(temp)

'''scaling Data to %BSH'''
for i, x in enumerate(Data):
    Data[i] = ((x*amp)/max_BSH)*100

'''Define ROI'''
i_t1, = np.where(np.isclose(t,t1_ROI))[0]
i_t2, = np.where(np.isclose(t,t2_ROI))[0]
Data_ROI = Data[i_t1:i_t2]
t_ROI = t[i_t1:i_t2]

'''detect peak in ROI'''
i_peak_ROI, = np.where(np.isclose(Data_ROI, max(Data_ROI)))
i_peak_ROI = i_peak_ROI[0]
peak_ROI = Data_ROI[i_peak_ROI]
t_peak = t_ROI[i_peak_ROI]

'''FFT of ROI'''
yf = abs(sp.fft.rfft(Data_ROI,norm='forward'))
xf = sp.fft.rfftfreq(len(Data_ROI), i_t)*1e-3

'''FFT ROI for SNR'''
f1_ROI = 200
f2_ROI = 400
i_f1, = np.where(np.isclose(xf,f1_ROI))[0]
i_f2, = np.where(np.isclose(xf,f2_ROI))[0]
yf_ROI = yf[i_f1:i_f2]
f_ROI = xf[i_f1:i_f2]

'''calculating noise floor'''
noise_mean = np.sum(yf_ROI)/len(yf_ROI)
print(noise_mean)

'''calculating max Spectral magnitude'''
yf_max = max(yf)
print(yf_max)
SN=10*np.log10(yf_max/noise_mean)
print(SN)

'''create Arrays for Values and Time'''
Data_arr = np.array(Data)
time_arr = np.array(t)

'''Plots'''

plt.figure(1, figsize=(5,6))
plt.rcParams['figure.dpi'] = 480
plt.subplots_adjust(hspace=0.7)

ax1 = plt.subplot(3,1,1)
ax1.set_title('Signal')
ax1.set_xlabel('time [µs]')
ax1.set_ylabel('Amplitude [%BSH]')
ax1.set_ylim(-100,100)
ax1.set_xlim(0,2000)
ax1.grid()
ax1.annotate('ROI',(t1_ROI+5,-97),fontsize=8)
ax1.plot(t1_ROI,0, 'r|', markersize=500)
ax1.plot(t2_ROI,0, 'r|', markersize=500)
ax1.plot(time_arr,Data_arr)

ax2 = plt.subplot(3,1,2)
ax2.set_title('ROI')
ax2.set_xlabel('Time [µs]')
ax2.set_ylabel('Amplitude [%BSH]', labelpad=10)
ax2.set_xlim(t1_ROI-1,t2_ROI+10)
ax2.set_ylim(-75,75)
ax2.set_yticks([-50,-25,0,25,50])
ax2.grid()
ax2.plot(t_ROI,Data_ROI)
ax2.annotate('backwall echo\n@ '+str(round(t_peak-t_off-TR_delay,2))+'µs',(t1_ROI+2,-70),fontsize=10)
ax2.plot(t_peak-t_off,peak_ROI, 'r|', markersize=500)

ax3 = plt.subplot(3,1,3)
ax3.set_title('ROI Spectrum')
ax3.set_xlabel('Frequency [kHz]')
ax3.set_ylabel('Magnitude', labelpad=25)
ax3.grid('both')
ax3.set_yticks(np.arange(0,max(yf)+2,round(max(yf)/3,0)))
ax3.set_xlim(0,100)
# ax3.annotate('SNR= '+str(np.round(SN,decimals=2))+'dB', (200,0.001))         #plots SNR
ax3.plot(xf, yf)

if save_signal==True:
    plt.savefig(filename.removesuffix('.asd')+',SW-Verstärkung='+ str(amp_dB)+'dB'+'.png',format='png',bbox_inches="tight")
plt.show()
